Aula 1
	Habilitando Cache
		No metodo que eu quero cachear eu tenho que anotar ele com @Cacheable, o value é um identificador deste cache
			@Cacheable(value="produtosHome")
			public ModelAndView index(){
			  List<Produto> produtos = produtoDao.listar();
			  ModelAndView modelAndView = new ModelAndView("home");
			  modelAndView.addObject("produtos", produtos);
			  return modelAndView;
			}
		
		Porem eu preciso agora habilitar o cache no spring, para isso eu vou na minha classe de Configuração e anoto ela com @EnableCaching e preciso criar o metodo cacheManager, para retornar um gerenciador de cache para o spring trabalhar
		
			@EnableWebMvc
			@ComponentScan(basePackageClasses={HomeController.class, ProdutoDAO.class, FileSaver.class, CarrinhoCompras.class})
			@EnableCaching
			public class AppWebConfiguration {

			  [...]

			  @Bean
				public CacheManager cacheManager(){
					//UMA OBSERVAÇÃO: aqui estamos usando o cache do proprio spring, mas ele não é recomandavel utilizar em produção
					//A sugestão é porque o Spring não permite algumas configurações - como por exemplo, o limite da quantidade de elementos que podem ser guardados no cache ou até mesmo um tempo de vida
					//VAMOS USAR O GUAVA (mais abaixo), poderiamos usar tambem o e-cache por exemplo
					return new ConcurrentMapCacheManager();
				}

			}
			
	Invalidar o Cache
		Existe um momento que iremos querer matar esse cache, por exemplo:
			tenho uma listagem de livro que estão no cache, mas quando eu cadastrar um livro novo quero que esse cache morra, para eu poder atualizar a minha listagem de livro, neste caso eu uso a anotacao @CacheEvict no metodo que ira ser responsavel por invalidar meu cache, no nosso caso o metodo grava, que grava um novo livro
			
			@RequestMapping(method=RequestMethod.POST)
			//Aqui significa que quando chamar esse metodo o memso ira matar meu cache, e o segundo parametro significa que eu quero matar todos os valores contidos no cache (***** estudar mais sobre esse segundo parametro)
			@CacheEvict(value="produtosHome", allEntries=true)
			public ModelAndView gravar(MultipartFile sumario, @Valid Produto produto, BindingResult result,  RedirectAttributes redirectAttributes){

			[...]

			}
			
	Usando GUAVA(canivete suiço da google, tem muitas funcionalidade e uma delas é o cache)
	
		A documentação do Spring, apesar de fornecer o gerenciador de cache que estamos usando, alerta para que este seja usado apenas em ambiente de desenvolvimento.(explicação do porque ja foi explicado logo acima)
		
		A documentação recomenda o uso do Guava, um framework de cache fornecido pelo Google. Para usá-lo, precisaremos alterar algumas de nossas configurações. Primeiro, precisaremos declarar o Guava como uma das dependências do projeto no pom.xml
		
		<dependency>
			<groupId>com.google.guava</groupId>
			<artifactId>guava</artifactId>
			<version>18.0</version>
		</dependency>

		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-context-support</artifactId>
			<version>4.1.0.RELEASE</version>
		</dependency>	
		
		Uma das dependências é o próprio Guava. A outra será uma biblioteca que faz a integração do mesmo com o Spring
		
		Agora vamos no metodo onde tinhamos configurado o cache, para configurar o nosso cache com guava
		
		
		Para podermos adicionar as configurações de tamanho e tempo limite do cache, precisaremos primeiro criar um objeto do tipo CacheBuilder e ao chamar o método newBuilder da classe, podemos chamar logo em seguida os métodos maximumSize e expireAfterAccess, passando valores de 100 para o tamanho máximo de elementos que serão guardados no cache e 5 e TimeUnit.MINUTES para o segundo método, respectivamente, indicando que o cache será expirado a cada cinco minutos. O código ficará assim:
			CacheBuilder<Object, Object> builder = CacheBuilder.newBuilder().maximumSize(100).expireAfterAccess(5, TimeUnit.MINUTES);
		
		Após isto, criaremos um objeto do tipo GuavaCacheManager e usar o método setCacheBuilder para passar o builder de cache que criamos anteriormente. Os dois passos feitos agora temos o método assim:
			
			@Bean
			public CacheManager cacheManager(){
			  CacheBuilder<Object, Object> builder = CacheBuilder.newBuilder().maximumSize(100).expireAfterAccess(5, TimeUnit.MINUTES);
			  GuavaCacheManager manager = new GuavaCacheManager();
			  manager.setCacheBuilder(builder);
			  return manager;
			}
			
Aula 2
	
	Criando um serviço Rest
		
		Trabalhando com Json @ResponseBody
			
			vamos criar um metodo que retrona um produto e vamos anotar ele com @ResponseBody:
				@RequestMapping("/{id}")
				@ResponseBody
				public Produto detalheJSON(@PathVariable("id") Integer id){
					return produtoDao.find(id);
				}
				
			Dessa forma, estamos dizendo para o Spring que o retorno daquele método será o corpo da resposta da requisição
			Se acessarmos novamente localhost:8080/casadocodigo/produtos/5, teremos o json do retorno:		
				{
				   "id":11,
				   "titulo":"tesgte",
				   "descricao":"fdsfsfdsfdsfs",
				   "paginas":3,
				   "dataLancamento":1478829600000,
				   "precos":[
					  {
						 "valor":33.00,
						 "tipo":"EBOOK"
					  },
					  {
						 "valor":44.00,
						 "tipo":"IMPRESSO"
					  },
					  {
						 "valor":22.00,
						 "tipo":"COMBO"
					  }
				   ],
				   "sumarioPath":"arquivos-sumario/imagens-lobos.jpg"
				}
			
			Obs: É importante notar que só funcionou, porque o Jackson está configurado no projeto. Se não tivéssemos configurado a biblioteca anteriormente no primeiro módulo do curso, o recurso não teria funcionado. Teríamos problema também, caso mais de uma biblioteca estivesse configurada para transformar objetos em JSON, no projeto. Haveria conflito e teríamos que realizar novas configurações para obter o mesmo resultado.
	
	ContentNegotiation
		Eu quero que um mesmo metodo possa ter diversos retornos, como por exemplo, um json, ou mesmo um modelAndView , ou XML etc.
		desenvolveu-se no mercado um padrão que provê uma negociação do conteúdo retornado pela aplicação. Através da técnica chamada de Content Negociation é possível que uma mesma URL retorne as informações em formatos diferentes. Exemplo: acessar a URL localhost:8080/casadocodigo/produtos/5 traria como resposta o HTML da página de detalhes daquele produto, enquanto acessar localhost:8080/casadocodigo/produtos/5.json retornaria o JSON que representa aquele produto.
		
		na classe AppWebConfiguration vamos criar o metodo contentNegotiationViewResolver
		
			@Bean
			public ViewResolver contentNegotiationViewResolver(ContentNegotiationManager manager){
				List<ViewResolver> viewResolvers = new ArrayList<>();
				viewResolvers.add(internalResourceViewResolver());
				viewResolvers.add(new JsonViewResolver());

				ContentNegotiatingViewResolver resolver = new ContentNegotiatingViewResolver();
				resolver.setViewResolvers(viewResolvers);
				resolver.setContentNegotiationManager(manager);
				return resolver;
			}
		
		agora vamos criar a classe JsonViewResolver
		
			public class JsonViewResolver implements ViewResolver {

				@Override
				public View resolveViewName(String arg0, Locale arg1) throws Exception {
					MappingJackson2JsonView jsonView = new MappingJackson2JsonView();
					//O trecho jsonView.setPrettyPrint(true) foi adicionado para que o Jackson mantenha uma formatação amigável ao retornar o JSON dos nossos produtos
					jsonView.setPrettyPrint(true);
					return jsonView;
				}	
			}
		
		feito isso se testarmos localhost:8080/casadocodigo/produtos/5 e localhost:8080/casadocodigo/produtos/5.json , teremos retornos diferentes
		agora o spring tera mais de um resolver de solução para nós, caso eu queria que retorne um XML eu preciso configurar um resolver para XML(****depois eu pesquiso como faz isso)
		
Aula 3
	Habilitar o servlet default para disponibilizar arquivos css e javascript
		para dizer para o Spring que as requisições referentes a arquivos de script, estilo, fontes e imagens não devem ser processadas pelo servlet do Spring, mas sim pelo servlet default da aplicaçao, precisamos configurar isso na nossa classe AppWebConfiguration.
		
		O primeiro passo é fazer com que esta classe agora herde da classe WebMvcConfigurationAdapter
		Após isso, no final da classe, criaremos um novo método chamado configureDefaultServletHandling que irá configurar o servlet padrão para que este atenda as requisições de arquivos como css e js. Este método recebe um parâmetro do tipo DefaultServletHandlerConfigurer que chamaremos apenas de configurer e usaremos o método enable() deste objeto para habilitar o servlet padrão do servidor de aplicação.
			@Override
			public void configureDefaultServletHandling(DefaultServletHandlerConfigurer configurer) {
				configurer.enable();
			}
			
	Problemas com caminhos relativos no Jsp
		**** estudar mais sobre <c:url /> e a resolução de problemas com caminhos relativos
		
Aula 4
	
	Habilitando SpringSecurity
		
		incluir dependencias no pom.xml
			<dependency>
				<groupId>org.springframework.security</groupId>
				<artifactId>spring-security-config</artifactId>
				<version>4.0.0.RELEASE</version>
			</dependency>
			<dependency>
				<groupId>org.springframework.security</groupId>
				<artifactId>spring-security-taglibs</artifactId>
				<version>4.0.0.RELEASE</version>
			</dependency>
			<dependency>
				<groupId>org.springframework.security</groupId>
				<artifactId>spring-security-web</artifactId>
				<version>4.0.0.RELEASE</version>
			</dependency>
			<dependency>
				<groupId>org.springframework.security</groupId>
				<artifactId>spring-security-core</artifactId>
				<version>4.0.0.RELEASE</version>
			</dependency>
		
		
		1 - O próximo passo para começarmos a utilizar realmente os recursos de segurança do Spring é criar a classe responsável por inicializar o filtro de segurança. No pacote br.com.casadocodigo.loja.conf, criaremos a classe SpringSecurityFilterConfiguration, que faremos extender a classe AbstractSecurityWebApplicationInitializer.
		
			public class SpringSecurityFilterConfiguration extends AbstractSecurityWebApplicationInitializer{

			}
			
		
		2 - Agora precisamos criar a classe de configuração de segurança
		
			@EnableWebSecurity
			public class SecurityConfiguration extends WebSecurityConfigurerAdapter{

			}
		
		3 - para que isso funcione, o Spring precisa saber que a classe existe. Lembra qual classe que carrega todas as configurações de nossa aplicação? É a ServletSpringMVC. Nesta usamos o método getServletConfigClasses para carregar as configurações da aplicação e do JPA no primeiro módulo deste curso.
		    Mas agora, o método que usaremos é o getRootConfigClasses que carrega configurações logo ao iniciar a aplicação. Este método simplesmente retorna um Array de classes do mesmo jeito que o método getServletConfigClasses faz. Assim faremos a classe SecurityConfiguration ser reconhecida pelo Spring:
		
			protected Class<?>[] getRootConfigClasses() {
				return new Class[]{SecurityConfiguration.class};
			}
		
	Autorizando acesso para URLs
		
		Agora ao tentarmos acessar qualquer página no projeto, seremos redirecionados para esta tela de login e para realizar qualquer operação, teremos que nos autenticar
		agora vamos definir niveis de acesso para as URLs do nosso projeto
		na classe SecurityConfiguration vamos sobreescrever o metodo configure
			
			@Override
			protected void configure(HttpSecurity http) throws Exception {
				http.authorizeRequests()
				.antMatchers("/produtos/form").hasRole("ADMIN")
				.antMatchers(HttpMethod.POST, "/produtos").hasRole("ADMIN")
				.antMatchers(HttpMethod.GET, "/produtos").hasRole("ADMIN")
				.antMatchers("/resources/**").permitAll()
				.antMatchers("/carrinho/**").permitAll()
				.antMatchers("/pagamento/**").permitAll()
				.antMatchers("/produtos/**").permitAll()
				.antMatchers("/").permitAll()
				.anyRequest().authenticated()
				.and().formLogin();
			}
			
		Perceba que montamos uma série de padrões de caminhos definindo onde será permitido o acesso com autenticação ou não.
		Estamos bloqueando o acesso a /produtos/form para todos que não são ADMIN, assim como requisições do tipo POST para o caminho /produtos/form. Estamos permitindo o acesso ao home da nossa aplicação através do / e também ao carrinho de compras através do /carrinho/**. Por último, estamos sinalizando que estas verificações devem ser feitas para todas as requisições e que as bloqueadas através do hasRole devem ser autenticadas.
		
		Obs: é bom lembrar que a ordem para liberar ou não as paginas importa, então é uma boa pratica primeiro bloquearmos o que tiver que bloquear e liberar depois(o exemplo esta desta forma)
		
	Criando Usuario e UsuarioDao
		
		Agora precisamos de usuarios para podermos nos autenticar, então vamos criar nosso DAO, model e alterar nossa classe de configuração SecurityConfiguration
		
			//classe de ROLES
			@Entity
			public class Role implements GrantedAuthority{

				@Id
				private String nome;

				// getters and setters

				@Override
				public String getAuthority() {
					return this.nome;
				}

			}	
			
			//classe De Usuario
			@Entity
			public class Usuario implements UserDetails {
				private static final long serialVersionUID = 1L;

				@Id
				private String email;
				private String nome;
				private String senha;

				//Queremos também que ao carregar o usuário, as permissões sejam carregadas por meio do fetch=FetchType.EAGER
				@OneToMany(fetch=FetchType.EAGER)
				private List<Role> roles = new ArrayList<Role>();

				[...]
			}

			@Repository
			public class UsuarioDAO implements UserDetailsService{

				@PersistenceContext
				private EntityManager manager;
				
				
					public UserDetails loadUserByUsername(String email) {
						List<Usuario> usuarios = manager.createQuery("select u from Usuario u where u.email = :email", Usuario.class)
								.setParameter("email", email).getResultList();

						if (usuarios.isEmpty()) {
							throw new UsernameNotFoundException("O usuário " + email + " não foi encontrado");
						}

						return usuarios.get(0);
					}

			}

			//na classe de configuração precisamos sobreescrever o metodo  configure(AuthenticationManagerBuilder auth)
			@EnableWebMvcSecurity
			public class SecurityConfiguration extends WebSecurityConfigurerAdapter{

				@Autowired
				private UsuarioDAO usuarioDao;

				@Override
				protected void configure(HttpSecurity http) throws Exception {
					[...]
				}

				@Override
				protected void configure(AuthenticationManagerBuilder auth) throws Exception {
					//Usaremos uma criptografia chamada BCrypt e faremos isto utilizando a classe BCryptPasswordEncoder
					auth.userDetailsService(usuarioDao)
					.passwordEncoder(new BCryptPasswordEncoder());
				}
			}
			
			Alteração na class ServletSpringMVC
			
			Uma observação deve ser feita antes que tentemos testar as funcionalidades de autenticação de usuários: as configurações de segurança estão iniciando no método getRootConfigClasses da classe ServletSpringMVC e estas requerem as configurações do DAO, carregadas em outro momento pelo método getServletConfigClasses. Isto deve gerar erros ao tentarmos inicializar a aplicação. Para resolvermos,colocaremos todas as configurações para inicializar no método getRootConfigClasses. A classe ServletSpringMVC deve ficar da seguinte forma:
			
			public class ServletSpringMVC extends AbstractAnnotationConfigDispatcherServletInitializer{

				@Override
				protected Class<?>[] getRootConfigClasses() {
					return new Class[]{SecurityConfiguration.class, AppWebConfiguration.class, JPAConfiguration.class};
				}

				@Override
				protected Class<?>[] getServletConfigClasses() {
					return new Class[] {};
				}
				[...]
			}	

			fazer inserts
			
			insert into Role values ('ROLE_ADMIN');
			Obs:Note que o nome do Role segue um padrão: ROLE_ALGUMACOISA. Isso porque o método hasRole que usamos nas verificações segue o mesmo padrão então sempre tenho que salvar uma role assim ROLE_ALGUMACOISA e quand fazemos isso:
					http.authorizeRequests().antMatchers("/produtos/form").hasRole("ADMIN") --> ele verifica ROLE_ADMIN
			
			insert into Usuario (email, nome, senha) values ('admin@casadocodigo.com.br', 'Administrador', '$2a$04$qP517gz1KNVEJUTCkUQCY.JzEoXzHFjLAhPQjrg5iP6Z/UmWjvUhq')
			Obs:Aqui o único ponto que merece uma observação é a senha. Esse código esquisito nada mais é o resultado da criptografia BCrypt dos carecteres 123456. Pode-se gerar esses códigos com algumas ferramentas ou linguagens de programação. uma das ferramentas é o BCrypt Calculator.
		
			insert into Usuario_Role(Usuario_email, roles_nome) values ('admin@casadocodigo.com.br', 'ROLE_ADMIN')
			
			
	Usando Taaglibs do srping security
		As vezes quero mostrar na pagina algum conteudo só se o usuario estiver logado, para isso vamos usar as taglibs do spring
		Usando a diretiva:
			<%@ taglib uri="http://www.springframework.org/security/tags" prefix="security" %>
			
		e no Jsp
			<security:authorize access="isAuthenticated()"> OU <security:authorize access="hasRole('ROLE_ADMIN')">
				<li><a href="${s:mvcUrl('PC#listar').build() }" rel="nofollow">Listagem de Produtos</a></li>
				<li><a href="${s:mvcUrl('PC#form').build() }" rel="nofollow">Cadastro de Produtos</a></li>
			</security:authorize>
			
			Ou seja esse conteudo só sera exibido se eu estiver logado na aplicação
			
		Para exibir o nome do usuario logado
			<ul class="nav navbar-nav navbar-right">
			  <li><a href="#"><security:authentication property="principal.username"/></a></li>
			</ul>
			
	Evitando ataques do tipo CSRF
		CSRF é uma sigla que representa a frase Cross Site Request Forgery, uma técnica de ataque a sites muito comum na web. A técnica representa o cenário de que um outro site está enviando dados para nossa aplicação, em vez do usuário diretamente. Geralmente, acontece com páginas clonadas, uma página falsa é apresentada ao usuário e este sem saber submete seus dados que por sua vez podem ser enviados ao servidor original ou podem ser feitas cópias em um servidor falso para posteriormente ter o uso indevido.
		Por ser uma técnica de ataque muito comum e também muito perigosa, diversos frameworks de várias plataformas, já possume recursos prontos para que usemos afim de evitar tais ocorrências. Com o Spring não é diferente.
		
		A solução mais simples é criar um novo input no formulário com o valor ${_csrf.parameterName} no atributo name e ${_csrf.token}. Em nossa página de detalhes.jsp teriamos:
		
		<form>
			[...]
			 <input type="hidden" name="${_csrf.parameterName }" value="${_csrf.token }" />
		</form>
		
		Obs: assim é ruim, teria que lembrar de por esse input em todos os forms e lembrar desse nome mutcho louco ae, o spring ja fornece esse parametro quando eu uso o form dele mesmo
		
		<%@ taglib uri="http://www.springframework.org/tags/form" prefix="form"%>
		
		<form:form servletRelativeAction="/carrinho/add" method="post" cssClass="container">
				[...]
		</form:form>	

	Personalizando Login
		Vimos até agora que o login que aparece quando precisamos nos autenticar é uma tela do proprio spriong, mas agora vamos criar a nossa
		
		vamos criar o loginFomr.jsp dentro da nossa pasta views		
		
			<%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"%>
			<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c"%>
			<%@ taglib uri="http://www.springframework.org/tags/form" prefix="form" %>
			<%@ taglib uri="http://www.springframework.org/tags" prefix="s" %>


			<!DOCTYPE html>
			<html>
			<head>
				<meta charset="UTF-8">
				<title>Livros de Java, Android, iPhone, Ruby, PHP e muito mais - Casa do Código</title>
				<c:url value="/resources/css" var="cssPath" />
				<link rel="stylesheet" href="${cssPath}/bootstrap.min.css" />
				<link rel="stylesheet" href="${cssPath}/bootstrap-theme.min.css" />
				<style type="text/css">
					body{
						padding: 60px 0px;
					}
				</style>
			</head>
			<body>
				<div class="container">
					<h1>Login Casa do Código</h1>
					<form:form servletRelativeAction="/login" method="post"> --> aqui chamamos o login via post, que ja é mapeado pelo spring, para realizar a autenticação
						<div class="form-group">
							<label>Nome</label>
							<input type="text" name="username" class="form-control" />
						</div>
						<div class="form-group">
							<label>Senha</label>
							<input type="password" name="password" class="form-control" />
						</div>
						<button type="submit" class="btn btn-primary">Logar</button>
					</form:form>
				</div>
			</body>
			</html>
			
		vamos criar o nosso controller para redirecionar para nosso login jsp sempre que chegar um request do tipo get para /login
			@Controller
			public class LoginController {

				@RequestMapping(value="/login", method=RequestMethod.GET)
				public String loginForm(){
					return "loginForm";
				}

			}
			
		Precisamos de alguma forma informar o Spring de que ele deve usar a nossa página e não a página padrão dele(se tentarmos agora acessar /login , ainda vira a pagina do spring).
		Na classe SecurityConfiguration no método configure que recebe o HttpSecurity temor que colocar no final do trecho o login page, nosso metodo ficara assim.
			
			protected void configure(HttpSecurity http) throws Exception {
				http.authorizeRequests()
				.antMatchers("/produtos/form").hasRole("ADMIN")
				.antMatchers("/carrinho/**").permitAll()
				.antMatchers(HttpMethod.GET, "/produtos").permitAll()
				.antMatchers(HttpMethod.POST, "/produtos").hasRole("ADMIN")
				.antMatchers("/produtos/**").permitAll()
				.antMatchers("/").permitAll()
				.anyRequest().authenticated()
				.and().formLogin().loginPage("/login").parmitAll(); --> aqui eu passo qual a minha tela de login
			}	

	Logout
		O spring ja mapeia o /logout para realizar o logout da aplicação, mas se eu tentar fazer algo como localhost:8080/casadocodigo/logout ele não funciona, pq esse logout por default só funciona como POST
		Para deixarmos o logout um pouco mais simples, faremos com que o mesmo possa ser feito através de requisições do tipo GET
		
		No objeto HttpSecurity precisaremos apenas usar o método and para adicionamos mais uma informação na cadeia de chamadas de métodos, este que por sua vez será seguido pela chamadas dos métodos logout e logoutRequestMatcher que receberá um objeto do tipo AntPathRequestMatcher indicando qual o caminho no qual o Spring ao receber uma requisisção, deverá fazer logout do usuário corrente. O método configure da classe SecurityConfiguration deve ficar da seguinte forma:
		Classe SecurityConfiguration
		
			@Override
			protected void configure(HttpSecurity http) throws Exception {
				http.authorizeRequests()
				.antMatchers("/produtos/form").hasRole("ADMIN")
				.antMatchers("/carrinho/**").permitAll()
				.antMatchers(HttpMethod.GET, "/produtos").permitAll()
				.antMatchers(HttpMethod.POST, "/produtos").hasRole("ADMIN")
				.antMatchers("/produtos/**").permitAll()
				.antMatchers("/resources/**").permitAll()
				.antMatchers("/").permitAll()
				.anyRequest().authenticated()
				.and().formLogin().loginPage("/login").permitAll()
				.and().logout().logoutRequestMatcher(new AntPathRequestMatcher("/logout")); --> pronto agora nosso logout funciona com GET
			}
		
		No final nosso metodo fica assim
		
			@Override
			protected void configure(HttpSecurity http) throws Exception {
				http.authorizeRequests()
					.antMatchers("/produtos/form").hasRole("ADMIN")
					.antMatchers("/carrinho/**").permitAll()        
					.antMatchers("/produtos/").hasRole("ADMIN")
					.antMatchers("/produtos/**").permitAll()
					.antMatchers("/resources/**").permitAll()
					.antMatchers("/pagamento/**").permitAll()
					.antMatchers("/").permitAll()
					.anyRequest().authenticated()
					.and().formLogin().loginPage("/login")
						.defaultSuccessUrl("/produtos").permitAll()
					.and().logout()
						.logoutRequestMatcher(new AntPathRequestMatcher("/logout"))
							.permitAll().logoutSuccessUrl("/login");    
			}
		
Aula 5
	