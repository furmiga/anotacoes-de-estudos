Inegração continua:
	
Servidor de integração continua : Jenkins

Aula 01 - MEU PRIMEIRO BUILD:
	Inicializando:

		-apos baixar o jenkins é necessario executa-lo 
			java -jar jenkins.war --httpPort=8180

		-Ao executar pela primeira vez o Jenkins, você vai reparar que ele exibe no terminal uma mensagem indicando que  é preciso fazer um setup inicial.
			Imagem: capture_20170319_213453.png
			
		-Repare que na imagem acima ele mostra um password, que devemos utilizar quando estamos configurando o jenkins pela primeira vez.
					
		-Acesse o Jenkins através do browser, no endereço localhost:8180. Você verá algo assim:	
			Imagem: capture_20170319_213907.png
		
		-basta colocar a senha que voce obteve no terminal
		
		-Na proxima tela selecione a primeira opção para instalar alguns pluging pré sugeridos
		
		-Depois da instalação dos plugins vc ira para a tela de criação de um usuario administrador e clique em Salvar
		
	Configurando:
		
		-Ja que utilizaremos o jenkins para efetuar compilar, efetuar deploy, instalar no servidor de aplicação, precisamos fazer uma configuração minima como informar onde esta a JDK, MAVEN e comandos para instalar o pacote no servidor de aplicação
		
		-Pra realizarmos essas configurações vamos clicar em "GERENCIAR JENKINS" e em "Global Tool Configuration"
		
		-Configurar JDK:
			- Clicar em Adicionar JDK
			- Caso você já tenha um JDK instalado pode desmarcar a opção Instalar Automaticamente
			- Temos que decobrir o diretorio de instalação do jdk, se estiver no windows basta digitar echo %JAVA_HOME%
			- Colar o caminho que copiamos do terminal(item acima) no campo JAVA_HOME e dar um nome pro JDK 
		
		-Configurar Maven
			- clicar em Adicionar Maven
			- Vamos desmarcar a opção para instalar o maven automaticamente e passar o caminho da nossa maquina
			- Para descobrir o diretorio de instalação do Maven, se estiver no windows basta digitar echo %M2_HOME%
			-  Com o caminho em mãos basta colá-lo no campo MAVEN_HOME. Após configurarmos o Maven, basta clicar em Save
			
	Criando um JOB:
		
		-Agora que configuramos o jdk eo maven precisamos pegar um projeto e fazer com que ele seja compilado, empacotado e instalado no servidor de aplicação
		
		-no dashboard clique em Novo job
		
		-na proxima tela informe o nome do job e selecione a primeir opção Contruir um projeto de software free-style e cliquem em OK
			Imagem: capture_20170319_215707.png
			
		-o primeiro passo é configurar como o Jenkins irá baixar o código-fonte do repositório Git
			
		-vamos na aba Gerenciamente de Código Fonte e preenchê-la com o endereço do nosso repositório Git. Como queremos utilizar a própria branch master, não vamos precisar alterar esta parte.
			Imagem: capture_20170319_220431.png
			
		-O nosso próximo passo é configurar o comportamento do Maven, para isto vamos visitar a aba build e na opção Adicionar passo no build selecione a opção Chamar alvos Maven de alto nível
			Imagem: capture_20170319_215803.png
			
		-Informe no campo Goals os comandos clean package,sendo o clean para que ele limpe a pasta /target e faça isto completamente do zero. Já o comando package é para que ele empacote o código no war
			Imagem: capture_20170319_215815.png
			
		-salve as alterações
		
		Deploy para o servidor de aplicação:
			
			- já estamos gerando o .war atraves do jenkins, mas precisamos deployar no tomcat.
			
			- vamos instalar o plugin do jenkins Deploy to Container para fazer isso
			
			- vamos visitar a página inicial do jenkins e clicar em Gerenciar Jenkins
				Imagem: capture_20170319_221011.png
			
			- Depois procure por Gerencia Plugins
				Imagem: capture_20170319_221044.png
			
			- E em seguida, na aba Disponíveis, utilize a busca para filtrar por Deploy to container e selecione-o na lista. Em sequência, utilize a opção instalar sem reiniciar
			
			-Após a instalação do plugin, volte as configurações do job do argentum-web
			
			-Nas opções do pós-build, selecione a opção Deploy war/ear to a container e preencha os campos como a imagem abaixo, indicando a localização do argentum-web.war, e selecionando o Tomcat 7 como container:
				Imagem: capture_20170319_215828.png e capture_20170319_215925.png
				
			-Repare que ali temos que preencher as opções de login e senha de um usuário administrador do Tomcat, teremos que configurar este usuario e senha, para isso tenho que ir la na pasta conf do tomcat e abrir o arquivo tomcat-user.xml
			
			-Dentro da tag <tomcat-users> , crie um novo usuário como abaixo:
				<user username="admin" password="admin" roles="manager-gui,manager-script,manager-jmx,manager-status" />
				
			-este usuario e senha obviamente tem que ser o mesmo que colocamos la no pós build do jenkins
			
			-É provável que você ainda não tenha as roles necessárias no seu arquivo de tomcat-user.xml, então aproveite para cria-las acima do seu novo usuário, ficando com tudo no final assim:

				<role rolename="manager-gui"/>
				<role rolename="manager-script"/>
				<role rolename="manager-jmx"/>
				<role rolename="manager-status"/>

				<user username="jenkins" password="jenkins" roles="manager-gui,manager-script,manager-jmx,manager-status" />
				
			-Salve o arquivo tomcat-user.xml e tente rodar seu job
		
	Exercicios:
		Qual a configuração de Goals do Maven nós fizemos no Jenkins durante a criação do Job?
			R: clean package
			
		Para que o Jenkins seja capaz de fazer deploy no Tomcat através do plugin Deploy to container, é preciso:
			R: É preciso criar um usuário com as devidas permissões no Tomcat para que o plugin do Jenkins seja capaz de realizar o deploy.
			
		Por que, quando realizamos deploy no Tomcat através do Jenkins, o comando cp nem sempre é a melhor opção?
			R: Porque no Windows não existe o comando cp e com certeza queremos que nosso código funcione nas mais diversas plataformas. Além disso, o Tomcat não precisa estar instalado na mesma maquina do Jenkins.
			
Aula 02 - BUILD CONTINO E NOTIFICACAO:
	BUILD CONTINUO SEMPRE DEPOIS DE UM COMMIT NO GIT:
		-Para fazermos isso, a configuração deve ser no repositório git do projeto adicionando no arquivo nomeDoSeuRepositorio/hooks/post-receive o seguinte conteúdo:
			curl http://endereco.do.jenkins/git/notifyCommit?url="https://github.com/alura-cursos/argentum-web.git
		
		-Veja que esta configuração precisa do endereço remoto do nosso servidor de integração, do Jenkins. Contudo, como nosso servidor utilizado no curso roda localmente, o hook adicionando no repositório do git que chama nosso servidor de integração não funcionará. Não se preocupe, para efeitos de aprendizagem, podemos adotar outra abordagem, contudo vale lembrar que essa é a mais recomendada em ambiente de produção
		
	Build períódico:
		-Uma solução é rodarmos nosso build de tempos em tempo e o Jenkins permite agendarmos a execução do nosso build em intervalos
		
		-Va na opção Configurar do job
		
		-Nela, há a opção Trigger de Builds. Nela, marcamos a check box Construir periodicamente , em seguida, na área Agenda, utilizamos a sintaxe do cron, um agendador de tarefas da plataforma Linux.
			Imagem: capture_20170320_084837.png
			
		-O código acima fará com que nosso build seja realizado de quinze em quinze minutos
		
	Notificações por e-mail:
		-Acesse as configurações do Jenkins em "Geranciar Jenkins -> Configurar sistema", e vamos selecionar Notificação de e-mail 
			Imagem: capture_20170320_085209.png
			
		-Clicando nela, podemos entrar com os dados do nosso servidor smtp, que varia de acordo com sua empresa
			Imagem: capture_20170320_090557.png
		
		-agora que configuramos o email precisamos fazer com que no processo do nosso build ele envie um email para algum destinatario caso de alguma merda no build
		
		-Em "Configurar" no seu job, na aba "Ações de pós-build", podemos adicionar uma ação de "Notificação de e-mail"
			Imagem: capture_20170320_090646.png
			
		-Para essa notificação, precisamos indicar os destinatários. Vamos deixar marcado apenas a opção "Mandar e-mail para todas as construções instáveis". Agora temos tudo configurado.
			Imagem: capture_20170320_090714.png
			
		-Perfeito, somos capazes de receber a notificação de falha, contudo o remetente deixa a desejar. Isso porque não configuramos o endereço do remetente, ou seja, do administrador do Jenkins, Para isso, vamos em "Configurar Sistema". Nele encontramos a configuração "Endereço e e-mail do administrador do sistema"
			Imagem: capture_20170320_091212.png e capture_20170320_094217.png
			
	Exercicios:
		-A melhor forma de integrar continuamente seu projeto é:
			R: Realizar a configuração de Push Notification no repositório Git é o mais indicado. Primeiro, é um processo automático e segundo que o build só será realizado quando realmente houver mudança no projeto.
			
		-Com a construção periódica ocorrendo de forma automatizada, a melhor maneira de saber se um build falhou é:
			R: A melhor forma é ser notificado pelo servidor, por exemplo, recebendo notificações de e-mail.
			
		-Para que se possa enviar emails através do Jenkins, é preciso:
			R: Configurar o servidor SMTP que for mais apropriado para o seu projeto
			
Aula 03 - Feedback de Qualidade: Testes Automatizados:
		Teste automatizado:
			-Quando queremos fazer um teste manual e este teste é feito direto na aplicação, navegando entre as telas, chamamos de teste funcional manual, agora queremos um teste funcional automatizado, que é o que iremos configurar no Jenkins.
			
			-Mas antes vamos ver os passos que seguimos para executar o teste funcional manual:

				1) Iniciar o Tomcat, pois precisamos que ele esteja rodando para fazer o deploy da aplicação.

				2) Fazer o deploy do war.

				3) Abrir o navegador.

				4) Navegar até a página desejada.

				5) Interagir com a página, isto é, preencher os campos desejados, clicar nos botões, verificar o resultado, etc.

				Aqui temos 5 passos que precisamos garantir que sejam feitos na hora de executar o teste funcional automatizado.
				
		Configuração do JOB:
			Configurações MAVEM:
				-Antes de configurarmos nosso Job, é importante vermos como foram feitas as configurações do Maven
				
				-No pom.xml temos a tag profiles que nada mais é do que uma amalgama de configurações que serão usadas apenas se o profile for especificado para ser usado. Há um profile chamado testes-integracao, que possui toda configuração específica para o teste de integração. Há dependências do Arquillian, do Tomcat embedded entre outros
				
				-Na parte de build, plugin, há a dependência maven-failsafe-plugin voltado para testes de integração, diferente do surefire voltado para testes de unidade.
				
				-documentação do Maven sobre build lifecycle e conhecer outra fases de build do Maven (https://maven.apache.org/guides/introduction/introduction-to-the-lifecycle.html)
				
			
			Configuração do JOB:
				-Clicando no Job "argentum", vamos na opção "Configurar". Na aba "Build", vamos trocar o goal package do Maven para verify
					Imagem: capture_20170321_101811.png
					
				-Agora, precisamos informar um profile na hora de executar nossas goals. Fazemos isso passando o parâmetro -P seguido do nome do profile que desejamos executar(o nome do profile que foi definido no pom.xml).
					Imagem: capture_20170321_103012.png
					
				-temos que passar agora o driver do chrome para que o selenium consiga fazer a navegação no browser para executar nossos testes funcionais(link p dowload do driver: https://sites.google.com/a/chromium.org/chromedriver/downloads)
					Imagem: capture_20170321_105428.png
			
				-caso eu esteja em um ambiente sem interface grafica uma alternativa ao Chrome ou outros navegadores é utilizar um Browser que roda em memória como PhantomJS (PhantomJS). Podemos alterar nossa configuração para utilizá-lo:
					Imagem: capture_20170321_110428.png
					
				-lembrando que os nomes dados a estes parametros são condizentes com o nomes de propriedades que tentamos buscar no proprio codigo fonte(webdriver.chrome.driver e phantomjs.binary.path)
				
			Entendo a configuração do Teste Funcional:
				Imagem: capture_20170321_105807.png
				
	Exercicios:
		-Considerando o projeto argentum-web utilizado no nosso treinamento, para executar os testes unitários eu preciso
			R: Não preciso fazer nada, pois o Maven ao executar a meta package automaticamente executa os testes unitários.
			
		-Para executar testes funcionais de forma automatizada precisamos que o servidor Tomcat seja inicializado. Estamos fazendo isso:
			R: Através do Arquillian, que roda integrado ao JUnit.
			
		-Para executar o teste funcional automatizado, acessando e interagindo com nossa página, nós utilizamos
			R: A API Selenium WebDriver.
			
		-Vimos que, quando rodamos nosso ambiente de Integração Contínua em uma máquina servidora, em geral nós não dispomos de um pacote gráfico que permita abrir uma janela de Browser, nesse caso, qual implementação da API WebDriver eu devo usar?
			R: Nós utilizamos o PhantomJSDriver.
			
		-PhantomJS é:
			R: O PhantomJS é uma aplicação que permite que eu interaja com código client-side (JS, HTML, CSS) sem a necessidade de um Browser.
		
			
			
			
			
		
	