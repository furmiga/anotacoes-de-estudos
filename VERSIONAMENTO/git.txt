- Pensando nesse problema foram criadas ferramentas de controle de versão, e esse curso apresentará uma das mais utilizadas hoje em dia, o Git

- Uma grande vantagem do Git é a existência de ferramentas comerciais de hospedagem de código na Web. A maior provedora de hospedagem de repositórios Git, abertos ou privados, hoje é o Github

- site para download do git https://git-for-windows.github.io/

- Depois de criada nossa conta no github, precisamos gerar uma senha (chave de segurança) que será responsável por identificar nossa máquina quando fizermos as interações entre nosso projeto e o serviço do Github. Caso não exista essa configuração entre nossa máquina e a conta do Github, o acesso ao serviço pelos comandos do Git será negado.  

- O processo de criação da chave de segurança é similar em todos os sistemas operacionais: basta abrir o prompt de comando (no caso do Windows, é necessário abrir o Git Bash) e inserir o seguinte comando:

	ssh-keygen -t rsa -C "seu_email@provedor.com"

- Agora será necessário realizar o login no http://github.com e seguir para as configurações do seu perfil. Siga "Settings", "SSH and GPG keys" e "New SSH key".Insira na caixa de texto o conteúdo do seu arquivo id_rsa.pub

- COMANDO CLONE ->  Para garantir que vamos adquirir todos os arquivos necessários, utilizaremos o comando git clone que, além de copiar os arquivos do projeto, traz todos os arquivos necessários para que o controle de versão dos arquivos continue sendo feito.

 -> git clone git://github.com/jcfonsecagit/repositorio.git sera clonado o projeto para a pasta que se encontra atualmento no cmd

-m determinado momento do projeto, é possível marcar o estado atual do repositório como a versão 1.0. Esse processo de adicionar um marcador, que habitualmente é o número da versão, é chamado de tag
para ver a versões do seu projeto basta entrar no seu repositorio e digitar "git tag" e ele ira listar todas as versões do projeto

-para poder voltar para uma versão especifica basta usar o comando "git checkout v0.1"(no cao v0.1 voce adpta para o nome da versão que deseja)

-caso queiramos saber o que mudou de uma versão para outra basta usar o comando "git diff v0.1 v0.2" (coloca o nome das duas versões a serem comparadas)

-O Git nos fornece uma funcionalidade onde podemos consultar quem foi o autor de cada linha de um arquivo através do comando git blame: git blame index.html

-Qual a diferença de GIT E GITHUB
	R:O github é um serviço que provê através de diversos planos (pagos e não pagos) a possibilidade de hospedar o repositório para nós. Enquanto o Git é o software com o qual podemos manipular os arquivos que estarão no repositório, que pode ser o github.

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Ciclo de vida GIT

-para fazer com que uma pasta comece a ser gerenciada pelo git basta navegar ate ela e executar o comando "git init"
-git status mostra o status dos seus arquivos(se estão sendo gerenciados pelo git ou não, se foram modificados ou não, etc...)
-git ls-files lista todos os arquivos que o git esta gerenciando do seu repositorio(todos que ele esta gerenciando e não todos que estão na pasta, pois pode ter arquivos na pasta que não estão sendo gerenciados pelo git)
-git add nomeDoArquivo.extencao adiciona o arquivo para o git comecar a gerenciar(logo se eu criar uma index.html e quero que por exemplo ele comite as alteraçoes deste arquivo eu faço git add index.html(e depois dou um comite))
-git commit -m "mesagem que ficara gravada na alteração" --comito as alterações no git

 fizemos o controle local do nosso projeto. Isso permite que possamos trabalhar em um projeto mesmo sem ter acesso à rede ou à internet pois essas alterações podem ser aplicadas mais tarde ao repositório "central".
 
Quais são os três estados de um repositório com os quais interagimos ao realizar o fluxo de controle com o Git?
	R:Os três estados de um repositório são "Working Directory", que são os arquivos que temos em nosso repositório e podemos modificá-los, "Index" ou "Staging Area", que é uma visão preliminar das modificações em nossos arquivos que queremos definir como um novo passo do projeto, e "HEAD", que é um passo completo de nosso trabalho, usado como referência para a comparação com nosso "Working Directory".
	
--outros exemplos do uso do git add
	É possível passar mais de um arquivo como parâmetro para o comando git add, basta separá-los por um espaço em branco, no mesmo comando. Além disso é possível adicionar todos os arquivos da pasta atual, com git add ..
O parâmetro também pode ser uma operação de busca de arquivos comum, por exemplo, para adicionar todos os arquivos com a extensão "txt" ao Index, podemos utilizar o comando git add *.txt, ou todos os arquivos em uma determinada subpasta do repositório com git add nome_da_pasta/

O comando git add -i é mais recomendado quando temos um número muito grande de alterações a serem adicionadas ao Index, e também um grande número de alterações que não gostaríamos de adicionar ao Index. O modo interativo inclusive permite que adicionemos seletivamente trechos de um arquivo, deixando algumas modificações de fora mesmo estando no mesmo arquivo.

--comitar tudo de uma unica vez
	O comando git commit -a já cria um novo HEAD com todas as alterações detectadas no repositório, porém novos arquivos não serão adicionados. O comando pode ser utilizado diretamente, dessa maneira o editor de textos padrão do computador será aberto para que uma mensagem de "commit" seja adicionada.
Podemos combinar a opção de mensagem com git commit -am 'Mensagem de commit'

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Sincronizando dados com repositorio

-primeiro criamos um repositorio no github
-para adicionar o repositorio remoto basta usar o comando git remote add [alias_do_repositorio] [uri_do_repositorio]
	[alias_do_repositorio] --> pode ser qualquer nome que sirva de apelido para o projeto(por padrão é usado "origin")
	[uri_do_repositorio] -- > uri que o proprio git fornece ao criar o repositorio la
		ex: git remote add origin https://github.com/furmiga/anotacoes-de-estudos.git
	
-agora podemos dar um push nos nossos comits(levando em consideração que o seu repositorio ja esta configurado com o "git init" e com tudo devidamente comitado)
	git push origin master
		.master é o brach do projeto(master é o padrão)

-podemos clonar repositorios tambem
	-git clone [uri_do_repositorio] --> assim o nome do repositorio que estiver no git sera o mesmo da sua maquina
	-caso eu queira dar um proprio nome para a pasta criada na minha maquina, basta eu fazer assim:
		Caso queira, é possível que o nome da pasta em seu computador seja diferente. Basta especificar o nome desejado no fim do comando:
			.git clone git://github.com/[usuario_do_dono_do_repositorio]/curso-git.git meuprojeto (colocando ao final o nome do projeto)
			
-caso eu altere coisas no repositorio os outros desenvolvedores terão que atualizar os seus arquivos, para isso usamos o pull
	-git pull origin master
		.agora os arquivos serão atualizados e todos ficaram com a mesma versão do projeto
	
-podemos visualizar o log de alterações direto no github, mas podemos fazer isso via terminal tambem com o comando log	
		-git log
	
-podemos ver tambem quais arquivos foram modificados com o comando 	whatchanged
	-git whatchanged

-no git podemos dar permissão para outros colaboradores(outros desenvolvedores) a comitar no nosso projeto
	.basta ir em setting do nosso repositorio e depois collaborators, e adicionar os colaboradores, pode tambem acessar via url https://github.com/[seu_usuario_no_github]/curso-git/admin/collaboration

	
-Às vezes desejamos visualizar mais informações do que o git log nos fornece, como por exemplo as linhas modificadas em cada commit. Para isso, basta passar uma opção ao comando git whatchanged para que o Git nos forneça tal informação. Qual é essa opção?
	R: -p ex: git whatchanged -p
	
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Organização do trabalho com branches

- As branches possibilitam desenvolver separadamente cada uma das funcionalidades sem interferir no desenvolvimento de uma outra parte do projeto.

- para criar uma branch nova basta usar o comando
	.git branch design -- no caso design é o nome da branch

- para saber quais branchs tem no projeto
	.git branch
	
- para trocarmos a branch atual basta fazer assim
	.git checkout design -- no caso design é o nome da branch

- para subirmos essa nova branch temos que dar um push
	.git push origin design
	
- Porém, toda vez que atualizarmos tanto o nosso projeto local quanto o projeto remoto, precisaremos indicar qual o repositório e o nome da branch 
	."git pull origin design" e "git push origin design" para atualizar os repositórios locais e remotos
	.para evitar esta trabalheira aqui podemos fazer o seguinte
		-podemos indicar o caminho (track) da branch remota para a nossa branch local. Isso pode ser feito no instante em que criamos a branch remota através da opção "-u". No nosso caso, temos:
			."git push -u origin design" Com isso, a nossa branch local sabe qual a branch remota que ela se referencia
		
- E como podemos visualizar as branches já existentes em um repositório remoto? Isso é feito através da opção "-r" passado ao comando git branch.
	.git branch -r
	
- para copiar uma branch remota para maquina local, basta fazer assim
	.git branch -t design origin/design --> origin/design é o nome da branch
	
- Ao digitar o comando git checkout -b design, criamos a branch design e mudamos para a branch design.

- Ao digitarmos o comando git branch -d design, a branch design será deletada.

verificar se tudo que eu faço em outras branchs são replicadas para a master*******************

- Ao digitar o comando git branch -a, nos é fornecido com todas as listas de branches tanto remotas quanto locais.

- Ao digitarmos o comando "git push origin :design" a branch remota design do repositório referente ao origin é deletada.

- Realizando o comando git fetch origin, podemos verificar todas as atualizações que foram realizadas no repositório referente ao origin.

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Como o Git trata as várias alterações no mesmo arquivo?


- caso duas pessoas estejam mechendo no mesmo arquivo, quando eu foi dar um push e o mesmo não estiver de acordo com o que esta no repositorio ira dar um erro e não aceitara seu push, logo temos que dar um pull para atualizar nossos arquivos, depois disso basta abrir o arquivo e ver as marcações que o proprio git colocou la, mostrando as diferenças no arquivo
ai é so arrumar e dar um push comitar e dar um push denovo

- mas a casos que o proprio git ja faz o merge , o processo manual esplicado acima é so para casos que gera conflito(ou seja alterações na mesma linha)

dar uma pesquisada no git mergetool***************************************

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Boas praticas GIT

- O comando "git rebase master" --> master é a branch que eu desejo ficar igual, os commits feitos em "desenvolvimento"(a minha branch atual)são movidos para uma branch temporária e o git atualiza a nova base de commits(pega tudo que esta no master). Após essa atualização, o próprio Git traz de volta os commits que realizamos e os aplica sobre a nova base, um de cada vez.


- O comando "git merge" --> Para utilizá-lo, primeiro é preciso ir para a branch para a qual se quer levar os commits, no caso, a "master" (git checkout master). Em seguida, deve-se dizer para o comando git merge de qual branch virão os commits novos, que, no caso, é a branch "desenvolvimento". Para isso, basta executar git merge desenvolvimento

- uma boa pratica é sempre fazer comit a cada alteração, pois quando for fazer um rebase para uma branch os conflitos que teram que ser resolvidos são menores

- cada desenvolvedor trabalhar em sua branch separada

- vantagem de usar rebase ao inves de merge
	.No rebase você terá a chance de fazer a junção passo a passo ao invés de fazer uma mega junção de código.

- No meio de um rebase em que houve conflito e teremos que tratar manualmente, fazemos esse tratamento na branch "(no branch)", que é apenas temporária, criada pelo Git para que possamos dar a resolução do conflito.

- O que o comando git rebase faz?
  R: O objetivo com comando git rebase é fazer com que a branch em que se está, tenha um novo HEAD que está em outra branch. Ou seja, a base da branch, a partir da qual você vai realizar seus commits, deverá ser modificada. Para isso, caso haja commits novos na branch que terá a base trocada, o Git coloca seus commits em um local temporário, e em seguida começa a aplicar a nova base. Após a atualização do HEAD, o Git começa a aplicar seus commits sobre a nova base.
  
- No processo de rebase, quando há um conflito, temos 3 opções para seguir. Quais são elas?
	R:continue, abort e skip ; ex de uso: git rebase --continue
	continue: deve ser utilizado após a resolução manual dos conflitos.
	skip: faz com que suas alterações sejam descartadas 
	abort: volta atrás em todo o processo de rebase.
- 

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- 

-Caso eu queira alterar um arquivo para o seu estado igual do repositorio eu faco um git checkout nomedoarquivo
	. o git checkout se eu passar o nome de uma branch ele muda para aquela branch agora se eu passar o nome de um arquivo ele volta as alterações que foram feitas no mesmo

